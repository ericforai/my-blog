---
import { SITE } from '~/config.mjs';
import { getLocaleFromPath, getTranslation } from '~/i18n/ui.ts';
import LanguagePicker from './LanguagePicker.astro';

// Get current locale from URL
const currentLocale = getLocaleFromPath(Astro.url.pathname);

// Get translated navigation items
const navItems = [
  { key: 'nav.home', href: currentLocale === 'en' ? '/' : '/zh/' },
  { key: 'nav.blog', href: currentLocale === 'en' ? '/blog' : '/zh/blog' },
  { key: 'nav.about', href: currentLocale === 'en' ? '/about' : '/zh/about' },
];
---

<header class="sticky top-0 z-40 border-b border-gray-200 bg-white/80 backdrop-blur-lg dark:border-gray-800 dark:bg-slate-900/80">
  <nav class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center">
        <a href={currentLocale === 'en' ? '/' : '/zh/'} class="flex items-center space-x-2">
          <img src="/logo.svg" alt="Logo" class="h-8 w-8" />
          <span class="text-xl font-bold">{getTranslation(currentLocale, 'brand.title')}</span>
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex md:items-center md:space-x-8">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class="text-gray-700 hover:text-primary dark:text-gray-300 dark:hover:text-primary"
          >
            {getTranslation(currentLocale, item.key)}
          </a>
        ))}
        <LanguagePicker />
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button 
          id="mobile-menu-button"
          class="inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-primary hover:bg-gray-100 dark:text-gray-300 dark:hover:text-primary dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Hamburger icon -->
          <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
          </svg>
          <!-- Close icon -->
          <svg class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div id="mobile-menu" class="hidden md:hidden">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-gray-200 dark:border-gray-700">
        {navItems.map(item => (
          <a 
            href={item.href} 
            class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary hover:bg-gray-100 dark:text-gray-300 dark:hover:text-primary dark:hover:bg-gray-800 rounded-md"
          >
            {getTranslation(currentLocale, item.key)}
          </a>
        ))}
        <div class="px-3 py-2">
          <LanguagePicker />
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', function() {
        const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        
        // Toggle menu visibility
        mobileMenu.classList.toggle('hidden');
        
        // Toggle button state
        mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
        
        // Toggle icons
        const hamburgerIcon = mobileMenuButton.querySelector('svg:first-child');
        const closeIcon = mobileMenuButton.querySelector('svg:last-child');
        
        if (isExpanded) {
          hamburgerIcon.classList.remove('hidden');
          hamburgerIcon.classList.add('block');
          closeIcon.classList.add('hidden');
          closeIcon.classList.remove('block');
        } else {
          hamburgerIcon.classList.add('hidden');
          hamburgerIcon.classList.remove('block');
          closeIcon.classList.remove('hidden');
          closeIcon.classList.add('block');
        }
      });
    }
  });
</script>

